function render(ctx, notesList, width, height, xOffset, yOffset, forcedSizes){
    // xOffset, yOffset are optional
    xOffset = xOffset || 0
    yOffset = yOffset || 0
    // calculate sizes
    var sizes = getSizes(width, height, xOffset, yOffset, forcedSizes || {})
    // draw sheet elements
    drawSheet(ctx, sizes);
    // draw notes
    for (var idx in notesList){
        drawNote(notesList[idx], Number(idx), sizes, ctx)
    }
}


var PATHS = {
    "clef": ["c", 0, ",", 0, 0.041, ",", 0, 0.125, ",", 0, 0.052, ",", -0.011, 0.093, ",", -0.016, 0.125, ",", -0.016, 1.458, ",", 0, 2.656, ",", 0.516, 3.593, ",", 1.547, 0.938, ",", 1.01, 1.407, ",", 2.192, 1.407, ",", 3.547, 0, ",", 1.687, -0.693, ",", 3.057, -2.078, ",", 4.109, -0.365, ",", 0.292, -0.844, ",", 0.526, -1.438, ",", 0.703, 0.073, ",", 0.844, 0.109, ",", 1.526, 0.109, ",", 2.047, 0, ",", 0.104, -0.015, ",", 0.484, -0.046, ",", 1.141, -0.052, ",", 1.208, -0.469, ",", 2.255, -1.25, ",", 3.14, -0.75, ",", 0.875, -1.688, ",", 1.313, -2.813, ",", 1.313, -1.052, ",", 0, -1.948, ",", -0.37, -2.687, ",", -1.11, -0.75, ",", -0.76, -1.125, ",", -1.671, -1.125, ",", -2.734, 0, ",", -0.562, 0.218, ",", -1.042, 0.656, ",", -1.437, 0.437, ",", -0.386, 0.948, ",", -0.579, 1.531, ",", -0.579, 0.521, ",", 0, 0.958, ",", 0.204, 1.313, ",", 0.61, 0.364, ",", 0.375, 0.546, ",", 0.844, 0.546, ",", 1.406, 0, ",", 0.5, -0.182, ",", 0.932, -0.546, ",", 1.297, -0.365, ",", 0.364, -0.802, ",", 0.547, -1.313, ",", 0.547, -0.208, ",", 0, -0.406, ",", -0.037, -0.594, ",", -0.11, 0.573, ",", 0.844, 1.334, ",", 1.266, 2.282, ",", 1.266, 0.895, ",", 0, 1.63, ",", -0.365, 2.203, ",", -1.094, 0.604, ",", -0.75, 0.932, ",", -1.63, 0.984, ",", -2.64, 0.021, ",", -0.625, 0.031, ",", -0.98, 0.031, ",", -1.063, 0, ",", -0.729, -0.026, ",", -1.328, -0.078, ",", -1.797, -0.646, ",", 0.104, -1.224, ",", 0.157, -1.734, ",", 0.157, -1.813, ",", 0, -3.354, ",", -0.719, -4.625, ",", -2.157, -1.25, ",", -1.448, -1.875, ",", -3.166, -1.875, ",", -5.156, 0, ",", -0.417, 0.036, ",", -0.839, 0.109, ",", -1.266, 0.084, ",", -0.354, 0.183, ",", -0.739, 0.297, ",", -1.156, 0.063, ",", -0.239, 0.24, ",", -0.62, 0.531, ",", -1.14, 0.105, ",", -0.157, 0.222, ",", -0.352, 0.352, ",", -0.586, 0.13, ",", -0.235, 0.221, ",", -0.388, 0.273, ",", -0.461, 0.125, ",", -0.261, 0.375, ",", -0.615, 0.75, ",", -1.063, 0.105, ",", -0.114, 0.214, ",", -0.242, 0.328, ",", -0.383, 0.115, ",", -0.14, 0.211, ",", -0.257, 0.29, ",", -0.351, 0.078, ",", -0.094, 0.135, ",", -0.167, 0.171, ",", -0.219, 0.037, ",", -0.052, 0.331, ",", -0.396, 0.883, ",", -1.031, 0.125, ",", -0.136, 0.25, ",", -0.276, 0.375, ",", -0.422, 0.125, ",", -0.146, 0.227, ",", -0.263, 0.305, ",", -0.352, 0.078, ",", -0.088, 0.138, ",", -0.148, 0.18, ",", -0.179, -0.469, ",", -1.552, -0.766, ",", -2.792, -0.891, ",", -3.719, -0.083, ",", -0.74, -0.125, ",", -1.755, -0.125, ",", -3.047, 0, ",", -1.135, 0.26, ",", -2.198, 0.781, ",", -3.187, 0.5, ",", -1.021, 1.209, ",", -1.86, 2.125, ",", -2.516, 0.063, ",", -0.042, 0.125, ",", -0.063, 0.188, ",", -0.063, 0.093, ",", 0, 0.161, ",", 0.021, 0.203, ",", 0.063, 0.698, ",", 0.844, 1.302, ",", 1.943, 1.812, ",", 3.297, 0.521, ",", 1.354, 0.782, ",", 2.588, 0.782, ",", 3.703, 0, ",", 1.25, -0.297, ",", 2.422, -0.891, ",", 3.516, -0.677, ",", 1.156, -1.552, ",", 2.354, -2.625, ",", 3.593, 0.271, ",", 0.854, 0.635, ",", 2.198, 1.094, ",", 4.032, "m", 1.656, ",", 9.093, "c", 0.677,-0.25, 1.208,-0.672, 1.594,-1.265, 0.416,-0.573, 0.625,-1.219, 0.625,-1.938, 0,-0.927, -0.313,-1.75, -0.938,-2.469, -0.646,-0.739, -1.463,-1.156, -2.453,-1.25, 0.563, ",", 2.75, 0.953, ",", 5.058, 1.172, ",", 6.922, "m", -7.547,-4.515, "c", 0, ",", 1.291, 0.521, ",", 2.427, 1.563, ",", 3.406, 1.062, ",", 0.948, 2.26, ",", 1.422, 3.593, ",", 1.422, 0.542, ",", 0, 1.073,-0.042, 1.594,-0.125, -0.208,-1.979, -0.62,-4.349, -1.234,-7.11, -0.74, ",", 0.084, -1.328, ",", 0.344, -1.766, ",", 0.782, -0.437, ",", 0.458, -0.656, ",", 0.974, -0.656, ",", 1.547, 0, ",", 0.989, 0.531, ",", 1.791, 1.594, ",", 2.406, 0.083, ",", 0.094, 0.125, ",", 0.192, 0.125, ",", 0.297, 0, ",", 0.104, -0.042, ",", 0.198, -0.125, ",", 0.281, -0.084, ",", 0.094, -0.183, ",", 0.141, -0.297, ",", 0.141, -0.011, ",", 0, -0.068,-0.011, -0.172,-0.032, -0.75,-0.406, -1.323,-0.927, -1.719,-1.562, -0.385,-0.688, -0.578,-1.375, -0.578,-2.063, 0,-0.896, 0.281,-1.708, 0.844,-2.437, 0.583,-0.729, 1.343,-1.198, 2.281,-1.406, -0.365,-1.459, -0.661,-2.599, -0.891,-3.422, -0.208, ",", 0.239, -0.458, ",", 0.523, -0.75, ",", 0.851, -0.291, ",", 0.328, -0.463, ",", 0.529, -0.515, ",", 0.602, -0.469, ",", 0.604, -0.828, ",", 1.078, -1.078, ",", 1.422, -0.448, ",", 0.614, -0.776, ",", 1.14, -0.985, ",", 1.578, -0.219, ",", 0.5, -0.411, ",", 1.041, -0.578, ",", 1.625, -0.167, ",", 0.562, -0.25, ",", 1.161, -0.25, ",", 1.797, "m", 6.516,-19.86, "c", -0.979, ",", 0.479, -1.745, ",", 1.167, -2.297, ",", 2.063, -0.573, ",", 0.927, -0.86, ",", 1.922, -0.86, ",", 2.984, 0, ",", 0.938, 0.235, ",", 2.203, 0.704, ",", 3.797, 0.937, ",", -1.135, 1.64, ",", -2.182, 2.109, ",", -3.141, 0.49, ",", -1.02, 0.734, ",", -2.083, 0.734, ",", -3.187, 0, ",", -0.833, -0.13, ",", -1.672, -0.39, ",", -2.516],
    "rest": ['c', 0, ',', -0.24, 0.135, ',', -0.5, 0.406, ',', -0.781, 0.188, ',', -0.209, 0.474, ',', -0.459, 0.86, ',', -0.75, 0.281, ',', -0.188, 0.557, ',', -0.479, 0.828, ',', -0.875, 0.26, ',', -0.375, 0.39, ',', -0.787, 0.39, ',', -1.235, 0, ',', -0.52, -0.166, ',', -0.979, -0.5, ',', -1.375, "l", -0.703, ',', -0.843, "c", -0.052, ',', -0.052, -0.078, ',', -0.118, -0.078, ',', -0.196, 0, ',', -0.078, 0.037, ',', -0.148, 0.11, ',', -0.211, 0.093, ',', -0.073, 0.171, ',', -0.109, 0.234, ',', -0.109, 0.094, ',', 0, 0.167, ',', 0.042, 0.219, ',', 0.125, "l", 3.031, ',', 3.594, "c", 0.125, ',', 0.166, 0.187, ',', 0.333, 0.187, ',', 0.5, 0, ',', 0.239, -0.13, ',', 0.5, -0.39, ',', 0.781, -0.167, ',', 0.188, -0.443, ',', 0.438, -0.828, ',', 0.75, -0.302, ',', 0.177, -0.589, ',', 0.469, -0.86, ',', 0.875, -0.26, ',', 0.375, -0.39, ',', 0.786, -0.39, ',', 1.234, 0, ',', 0.552, 0.156, ',', 1.016, 0.468, ',', 1.391, "l", 1.672, ',', 1.969, "c", 0.042, ',', 0.041, 0.073, ',', 0.109, 0.094, ',', 0.203, 0, ',', 0.083, -0.031, ',', 0.161, -0.094, ',', 0.234, -0.093, ',', 0.063, -0.172, ',', 0.094, -0.234, ',', 0.094, -0.021, ',', 0, -0.125, ',', -0.073, -0.313, ',', -0.219, -0.197, ',', -0.156, -0.458, ',', -0.307, -0.781, ',', -0.453, -0.364, ',', -0.135, -0.724, ',', -0.203, -1.078, ',', -0.203, -0.323, ',', 0, -0.588, ',', 0.089, -0.797, ',', 0.266, -0.177, ',', 0.187, -0.265, ',', 0.541, -0.265, ',', 1.062, 0, ',', 0.792, 0.187, ',', 1.417, 0.562, ',', 1.875, 0.042, ',', 0.052, 0.047, ',', 0.115, 0.016, ',', 0.188, -0.021, ',', 0.052, -0.068, ',', 0.078, -0.141, ',', 0.078, -0.083, ',', 0, -0.281, ',', -0.235, -0.594, ',', -0.703, -0.333, ',', -0.49, -0.64, ',', -1.058, -0.922, ',', -1.703, -0.302, ',', -0.678, -0.453, ',', -1.235, -0.453, ',', -1.672, 0, ',', -0.563, 0.266, ',', -0.844, 0.797, ',', -0.844, 0.615, ',', 0, 1.412, ',', 0.208, 2.391, ',', 0.625, "l", -2.641, ',', -3.172, "c", -0.135, ',', -0.167, -0.203, ',', -0.333, -0.203, ',', -0.5],
    "1/4": ["m", 0, -2.5, ",", "c", 0.625, ',', 0, 1.156, ',', 0.161, 1.593, ',', 0.484, 0.396, ',', 0.354, 0.594, ',', 0.797, 0.594, ',', 1.328, 0, ',', 0.896, -0.458, ',', 1.734, -1.375, ',', 2.516, -0.937, ',', 0.781, -1.943, ',', 1.172, -3.015, ',', 1.172, -0.625, ',', 0, -1.152, ',', -0.162, -1.579, ',', -0.485, -0.406, ',', -0.354, -0.609, ',', -0.797, -0.609, ',', -1.328, 0, ',', -0.896, 0.469, ',', -1.734, 1.406, ',', -2.516, 0.917, ',', -0.781, 1.912, ',', -1.171, 2.985, ',', -1.171, 'm', 2.2, ',', 0.95, 0, ',', -15, -0.7, ',', 0, 0, ',', 15],
    "1/4â†“": ["m", 0, 2.5, ",", 'c', -0.625, ',', 0, -1.156, ',', -0.161, -1.593, ',', -0.484, -0.396, ',', -0.354, -0.594, ',', -0.797, -0.594, ',', -1.328, 0, ',', -0.896, 0.458, ',', -1.734, 1.375, ',', -2.516, 0.937, ',', -0.781, 1.943, ',', -1.172, 3.015, ',', -1.172, 0.625, ',', 0, 1.152, ',', 0.162, 1.579, ',', 0.485, 0.406, ',', 0.354, 0.609, ',', 0.797, 0.609, ',', 1.328, 0, ',', 0.896, -0.469, ',', 1.734, -1.406, ',', 2.516, -0.917, ',', 0.781, -1.912, ',', 1.171, -2.985, ',', 1.171, 'm', -2.2, ',', -1, 0, ',', 15, 0.7, ',', 0, 0, ',', -15],
    "sharp": ["m", 0, ",", 4, "c", 0, "," ,0.2083, -0.10097, "," ,0.3125, -0.302828, "," ,0.3125, -0.20194, "," ,0, -0.30291, "," ,-0.1042, -0.30291, "," ,-0.3125, "l", 0, "," ,-2.4092, -1.366311, "," ,0.5209, 0, "," ,2.6308, "c", 0, "," ,0.2083, -0.103115, "," ,0.3125, -0.309344, "," ,0.3125, -0.20623, "," ,0, -0.309345, "," ,-0.1042, -0.309345, "," ,-0.3125, "l", 0, "," ,-2.4225, -0.515573, "," ,0.1958, "c", -0.0086, "," ,0.01, -0.05156, "," ,0.013, -0.128853, "," ,0.013, -0.08596, "," ,0, -0.161106, "," ,-0.033, -0.225615, "," ,-0.097, -0.06443, "," ,-0.065, -0.09668, "," ,-0.1408, -0.09668, "," ,-0.2275, "l", 0, "," ,-1.0025, "c", 0, "," ,-0.165, 0.0688, "," ,-0.2691, 0.206229, "," ,-0.3125, "l", 0.760492, "," ,-0.2608, 0, "," ,-2.6692, -0.515573, "," ,0.1825, "c", -0.0086, "," ,0.01, -0.05156, "," ,0.013, -0.128853, "," ,0.013, -0.08596, "," ,0, -0.161106, "," ,-0.033, -0.225615, "," ,-0.097, -0.06443, "," ,-0.065, -0.09668, "," ,-0.1408, -0.09668, "," ,-0.2275, "l", 0, "," ,-1.0158, "c", 0, "," ,-0.1475, 0.0688, "," ,-0.2433, 0.206229, "," ,-0.2867, "l", 0.760492, "," ,-0.2991, 0, "," ,-2.6175, "c", 0, "," ,-0.2084, 0.103115, "," ,-0.3125, 0.309345, "," ,-0.3125, 0.206229, "," ,0, 0.309344, "," ,0.1041, 0.309344, "," ,0.3125, "l", 0, "," ,2.4091, 1.366311, "," ,-0.5208, 0, "," ,-2.63, "c", 0, "," ,-0.2083, 0.10097, "," ,-0.3125, 0.30291, "," ,-0.3125, 0.201858, "," ,0, 0.302828, "," ,0.1042, 0.302828, "," ,0.3125, "l", 0, "," ,2.4217, 0.541393, "," ,-0.195, "c", 0.0086, "," ,-0.01, 0.04298, "," ,-0.013, 0.103115, "," ,-0.013, 0.0773, "," ,0, 0.158962, "," ,0.03, 0.244918, "," ,0.091, 0.06872, "," ,0.07, 0.103115, "," ,0.1475, 0.103115, "," ,0.235, "l", 0, "," ,1.0025, "c", 0, "," ,0.1558, -0.07738, "," ,0.26, -0.232049, "," ,0.3125, "l", -0.760492, "," ,0.26, 0, "," ,2.6691, 0.541393, "," ,-0.1816, "c", 0.0086, "," ,-0.01, 0.04298, "," ,-0.013, 0.103115, "," ,-0.013, 0.0773, "," ,0, 0.158962, "," ,0.035, 0.244918, "," ,0.1042, 0.06872, "," ,0.061, 0.103115, "," ,0.1342, 0.103115, "," ,0.2217, "l", 0, "," ,1.015, "c", 0, "," ,0.1391, -0.07738, "," ,0.235, -0.232049, "," ,0.2866, "l", -0.760492, "," ,0.2992, 0, "," ,2.6175, "m", -0.605738, "," ,-6.7708, -1.366311, "," ,0.4816, 0, "," ,2.6692, 1.366311, "," ,-0.4817, 0, "," ,-2.6691],
    "flat": ["m", 0, ",", 3, "c", 1.75796907, ",", -0.9567, 1.06117307, ",", -0.2358, 2.44753957, ",", -1.7995, 0.6614387, ",", -1.1266, 0.365299, ",", -1.6416, 0.3117582, ",", -1.9635, -0.071171, ",", -0.3599, -0.139215, ",", -0.7766, -0.9348346, ",", -0.9101, -0.6694755, ",", -0.031, -1.2626746, ",", 0.5961, -1.82446317, ",", 1.3416, -0.35554791, ",", 0.7252, -0.6451012, ",", -1.1729, 0.002883, ",", -0.8329, 1.00087157, ",", -1.5056, 1.74808267, ",", -2.0542, 3.03327497, ",", -1.0826, 0.5913363, ",", 0.3934, 0.8478531, ",", 1.3392, 0.8436305, ",", 1.7142, -0.00344, ",", 0.3733, 0.112542, ",", 0.8906, -0.3304865, ",", 1.7789, -1.2521834, ",", 1.1289, -2.330397, ",", 2.17, -3.54930169, ",", 2.5867, -0.57706218, ",", 0.083, -0.59696088, ",", -0.6108, -0.59696088, ",", -0.6108, 0.007439, ",", -1.2031, -0.0304067, ",", -11.65, 0, ",", -11.8822, "l", 0.59696088, ",", 0, "z"],
}

var SCALED_PATHS = {"scale": -1}


function scalePath(path, scale){
    var j;
    var pth = '';
    for (var i in path){
        j = path[i] * scale;
        if (!isNaN(j)){
            pth += ' ' + j;
        } else {
            pth += path[i];
        }
    }
    return pth;
}


function getSizes(width, height, xOffset, yOffset, forcedSizes){
    var sizes = {'w': width, 'h': height, 'paths': {}};
    sizes['scale'] = forcedSizes.scale || sizes.h / 82;
    sizes['margin'] = forcedSizes.margin || 3 * sizes.scale;
    sizes['leftMargin'] = (forcedSizes.leftMargin || sizes['margin']) + xOffset;
    sizes['lineSpacing'] = forcedSizes.lineSpacing || 5  * sizes.scale;
    sizes['noteSpacing'] = forcedSizes.noteSpacing || sizes['lineSpacing'] * 4;
    sizes['line3y'] = height / 2 + yOffset;
    sizes['line2y'] = sizes['line3y'] + sizes.lineSpacing;
    sizes['line1y'] = sizes['line2y'] + sizes.lineSpacing;
    sizes['line4y'] = sizes['line3y'] - sizes.lineSpacing;
    sizes['line5y'] = sizes['line4y'] - sizes.lineSpacing;
    sizes['clefOffset'] = forcedSizes.clefOffset || 13 * sizes.scale;
    sizes['notesOffset'] = (forcedSizes.notesOffset || sizes['clefOffset']) + xOffset;
    sizes['helperLineWidth'] = forcedSizes.helperLineWidth || 13 * sizes.scale;
    sizes['accidentalWidth'] = forcedSizes.accidentalWidth || 8.5 * sizes.scale;
    if (SCALED_PATHS.scale !== sizes.scale){
        for (var key in PATHS){
            SCALED_PATHS[key] = scalePath(PATHS[key], sizes.scale);
        }
        SCALED_PATHS.scale = sizes.scale;
    }
    sizes['paths'] = SCALED_PATHS;
    return sizes;
}


function drawSheet(ctx, sizes){
    // set style
    ctx.lineWidth = 1;
    ctx.fillStyle = "#000000";
    ctx.strokeStyle = "#000000";
    // draw lines
    var path = "";
    for (var i = 1; i <= 5; i++){
        var key = "line" + i + "y";
        path += "M " + sizes.leftMargin + " " + sizes[key] + " ";
        path += "L " + (sizes.w - sizes.margin) + " " + sizes[key] + " ";
    }
    ctx.path = path;
    ctx.fill();
    ctx.stroke();
    ctx.save();
    // draw clef
    path = "M" + (sizes.leftMargin + sizes.clefOffset) + " " + sizes.line3y + " ";
    path += sizes.paths.clef
    ctx.path = path;
    ctx.fill();
    ctx.stroke();
}


function drawNote(definition, idx, sizes, ctx){
    // get vertical offset (note: line3 = position 6)
    var vOffset = sizes.line3y + (6 - definition.position) * sizes.lineSpacing / 2;
    // get horizontal offset
    var hOffset = sizes.noteSpacing * (idx + 1) + sizes.notesOffset;
    // no point drawing if note is outside of drawing region
    if (hOffset > sizes.w){return null}
    // draw # or b
    if (definition.sharp){
        ctx.path = "M" + hOffset + " " + vOffset + " " + sizes.paths["sharp"]
        ctx.fill();
        ctx.stroke();
        hOffset += sizes.accidentalWidth;
    } else if (definition.flat){
        ctx.path = "M" + hOffset + " " + vOffset + " " + sizes.paths["flat"];
        ctx.fill();
        ctx.stroke();
        hOffset += sizes.accidentalWidth;
    }
    // choose note path name
    var pth = definition.position < 7 ? sizes.paths["1/4"] : sizes.paths["1/4â†“"];
    // draw note
    ctx.path = "M" + hOffset + " " + vOffset + " " + pth;
    ctx.fill();
    ctx.stroke();
    // draw additional short lines (if needed)
    var i = 0;
    var lineHOffset = hOffset - (sizes.helperLineWidth / 2);
    var vo = 0;
    if (definition.position <= 0){
        while (i >= definition.position){
            vo = sizes.line3y + (6 - i) * sizes.lineSpacing / 2;
            ctx.moveTo(lineHOffset, vo);
            ctx.lineTo(lineHOffset + sizes.helperLineWidth, vo);
            i -= 2;
        }
        ctx.stroke();
    } else if (definition.position >= 12){
        i = 12;
        while (i <= definition.position){
            vo = sizes.line3y + (6 - i) * sizes.lineSpacing / 2;
            ctx.moveTo(lineHOffset, vo);
            ctx.lineTo(lineHOffset + sizes.helperLineWidth, vo);
            i += 2;
        }
        ctx.stroke();
    }
}
